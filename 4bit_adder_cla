`timescale 1ns / 1ps

module adder_4bit_cla (
                   input  [3 : 0]  i_a,
                                   i_b,
                   input           i_carry,
                   
                   output [3 : 0]  o_sum,
                   output          o_carry 
                 );

wire [3:0] o_and_1, o_or_1, o_not_and, o_not_or;
wire [13:0] o_and;
wire not_i_carry;
wire [9:0] o_or_3, o_not_or_3;

and HALF_AND [3:0] (o_and_1, i_a, i_b);
or HALF_OR   [3:0] (o_or_1, i_a, i_b);

not NOT_AND [3:0] (o_not_and, o_and_1);
not NOT_OR [3:0] (o_not_or, o_or_1);

not (not_i_carry, i_carry);

and (o_and[0], o_or_1[0], o_not_and[0]);
and (o_and[1], not_i_carry, o_not_and[0]);
and (o_and[2], o_or_1[1], o_not_and[1]);
and (o_and[3], o_and[1], o_not_and[1]);
and (o_and[4], o_not_or[0], o_not_and[1]);
and (o_and[5], o_or_1[2], o_not_and[2]);
and (o_and[6], o_and[3], o_not_and[2]);
and (o_and[7], o_and[4], o_not_and[2]);
and (o_and[8], o_not_or[1], o_not_and[2]);
and (o_and[9], o_or_1[3], o_not_and[3]);
and (o_and[10], o_and[6], o_not_and[3]);
and (o_and[11], o_and[7], o_not_and[3]);
and (o_and[12], o_and[8], o_not_and[3]);
and (o_and[13], o_not_or[2], o_not_and[3]);

or (o_or_3[0], o_and[1], o_not_or[0]);
not (o_not_or_3[0],o_or_3[0]);

or (o_or_3[1], o_and[4], o_and[3]);
or (o_or_3[2], o_or_3[1], o_not_or[1]);
not (o_not_or_3[1],o_or_3[2]);

or (o_or_3[3], o_and[6], o_and[7]);
or (o_or_3[4], o_or_3[3], o_and[8]);
or (o_or_3[5], o_or_3[4], o_not_or[2]);
not (o_not_or_3[2],o_or_3[5]);

or (o_or_3[6], o_and[10], o_and[11]);
or (o_or_3[7], o_or_3[6], o_and[12]);
or (o_or_3[8], o_or_3[7], o_and[13]);
or (o_or_3[9], o_or_3[8], o_not_or[3]);
not (o_not_or_3[3], o_or_3[9]);

assign o_carry = o_not_or_3[3];
//XOR
xor (o_sum[0], i_carry, o_and[0]);
xor (o_sum[1], o_not_or_3[0], o_and[2]);
xor (o_sum[2], o_not_or_3[1], o_and[5]);
xor (o_sum[3], o_not_or_3[2], o_and[9]);

endmodule
